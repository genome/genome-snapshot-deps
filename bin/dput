#!/usr/bin/env python
import argparse
import email
import sys
import subprocess

def parse_args():
    parser = argparse.ArgumentParser(
        prog='tgi-dput.py',
    )
    parser.add_argument('changes_file', help='change file')
    parser.add_argument('-k', '--key', help='GPG key ID')
    parser.add_argument('-u', '--unsigned', action='store_true', help='do not sign')
    parser.add_argument('-r', '--remove', action='store_true', help='remove files after put')

    args = parser.parse_args()
    return args

def open_file(f):
    try:
        fd = open(f, 'r')
    except IOError:
        print "Unable to open '%s'." % f
        sys.exit(1)
    return fd

def parse_changes_for_files(changes_file):
    chg_fd = open_file(changes_file)
    # based on dput's implementation
    check = chg_fd.read(5)
    if check != '-----':
        chg_fd.seek(0)
    else: # found a PGP header, gonna ditch the next 3 lines
        chg_fd.readline() # eat the rest of the line
        chg_fd.readline() # Hash: SHA1
        chg_fd.readline() # empty line
    if not chg_fd.readline().find('Format') != -1:
        chg_fd.readline()
    changes = email.message_from_file(chg_fd)
    chg_fd.close
    files = []
    for a in changes.get('files').split('\n'):
        if len(a.split()) != 5:
            print >> sys.stderr, "Invalid Files line in .changes:\n  %s"%a
            sys.exit(1)
        files.append(a.split(' ')[-1])
    return files

def validate_files(files):
    for f in files:
        fd = open_file(f)
        fd.close

def sign_files(changes_file, key=None):
    if key != None:
        command = "debsign -k%s %s" % (key, changes_file)
    else:
        command = "debsign %s" % changes_file
    print command
    subprocess.call(command, shell=True)

def upload_files(files):
    for f in files:
        subprocess.call("chgrp info %s" % f, shell=True)
        subprocess.call("chmod 0664 %s" % f, shell=True)
        subprocess.call("scp %s /gscuser/codesigner/incoming/lucid-genome-development/" % f, shell=True)

def remove_files(files):
    for f in files:
        subprocess.call("rm %s" % f, shell=True)

def main(args=None):
    files = parse_changes_for_files(args.changes_file)
    validate_files(files)
    if args.unsigned == False:
        sign_files(args.changes_file, args.key)
    upload_files(files)
    if args.remove:
        remove_files(files)

if __name__ == '__main__':
    args = parse_args()
    main(args)
