#!/usr/bin/perl

use strict;
use warnings;

use IO::File;
use Carp;

my $codename = qx(lsb_release -sc); chomp $codename;
unless ($codename eq 'lucid') {
    die 'this must be run on a lucid box';
}

system("sudo apt-get update");

my @paths = glob('lucid/genome-snapshot-deps-*');
for my $path (@paths) {
    print($path, "\n");

    my @new_content;
    my $file = IO::File->new($path, 'r');
    while (my $line = $file->getline) {
        my ($package, $version_spec) = $line =~ /^\s*(\S+)\s*(.*)\s*$/;
        unless ($package) {
            die "no match for package for '$line' in $path";
        }
        my ($operator, $version) = $version_spec =~ /\(\s*(<<|<=|=|>=|>>)\s*(\S+)\s*\)/;
        if ($version_spec && (!$operator || !$version)) {
            die "failed to match operator and version from version spec '$version_spec'";
        }
        if ($operator && $operator eq '=') {
            print("preserving $package @ $version\n");
            push @new_content, $line;
        } else {
            print ("updating $package\n");
            my ($package) = split(/\s/, $line);
            my @policy_output = qx(apt-cache policy $package);
            my @candidate_output = grep { /Candidate/ } @policy_output;
            if (@candidate_output == 0) {
                die "failed to find a candidate for $package in $path";
            }
            if (@candidate_output > 1) {
                die "multiple candidates are not expected for $package in $path";
            }
            my ($candidate_version) = $candidate_output[0] =~ /\s*Candidate:\s+(\S+)/;
            if(!$candidate_version || $candidate_version eq '(none)') {
                die "no match for candidate version for $package in $path";
            }
            push @new_content, sprintf("%s (>= %s)\n", $package, $candidate_version);
        }
    }
    $file->close();

    $file = IO::File->new($path, 'w');
    $file->print(@new_content);
    $file->close();
}
